d3.csv("data/expensebudget.csv", function(d) {

    d.budget = +d.budget / 1000000;
    d.revenue = +d.revenue / 100000000;
    d.genres = d.genres.replace(/'/g, '"');
    d.genres = JSON.parse(d.genres);

    let release_year = 0;
    let release_month = 0;

    if (d.release_date.indexOf('-') == 2) {
        release_year = parseInt(d.release_date.substring(d.release_date.length - 4, d.release_date.length))
        release_month = parseInt(d.release_date.substring(d.release_date.length - 7, d.release_date.length - 5))
    } else {
        release_year = parseInt(d.release_date.substring(0, 4))
        release_month = parseInt(d.release_date.substring(5, 7))
    }

    d.release_year = release_year
    d.release_month = release_month

    return d;

}, function(error, expenseDetails) {

    let expenseBudgetChart = new ExpenseBudgetChart(expenseDetails);
    expenseBudgetChart.update();

    let releaseChart = new ReleaseChart(expenseDetails);

});


function populateYearDropdown(years) {
    //var years = [1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017];
    var select = $("#year-dropdown");
    let optgroup = "";
    if (years[0] % 10 != 0) {
        optgroup = $("<optgroup />").attr({
            "value": "Decade " + (years[0] - (years[0] % 10)) + "-" + (years[0] - (years[0] % 10) + 10),
            "label": "Decade " + (years[0] - (years[0] % 10)) + "-" + (years[0] - (years[0] % 10) + 10)
        });

    }
    $.each(years, function() {
        if (this % 10 == 0) {
            optgroup = $("<optgroup />").attr({
                "value": "Decade " + this + "-" + (this + 10),
                "label": "Decade " + this + "-" + (this + 10)
            });

        }
        optgroup.append($("<option />").val(this).text(this));
        select.append(optgroup);

    });
}

function drawGenreBars(genres) {
    let svg = d3.select('#genre-bar')
        .attr("width", 1350)
        .attr("height", 50)
        .append("g")
        .attr("transform", "translate(10,10)");
    var tooltip_render = function(tooltip_data) {
        let text = "<h4 class =" + tooltip_data.genre + " >" + tooltip_data.genre + " (" + tooltip_data.value + ")" + "</h4>";
        return text;
    }
    let tip = d3.tip().attr('class', 'd3-tip')
        .direction('se')
        .offset(function() {
            return [0, 0];
        })
        .html((d) => {
            // populate data in the following format
            let tooltip_data = {
                "genre": d[0],
                "value": d[1]
            }
            //pass this as an argument to the tooltip_render function then,
            //return the HTML content returned from that method.
            var html = tooltip_render(tooltip_data);
            return html;
        });
    svg.call(tip);
    var genres = Object.keys(genres).map(function(key) {
        return [key, genres[key]];
    });

    // Sort the array based on the first element
    genres.sort(function(first, second) {
        return first[1] - second[1];
    });
    let genreColors = ['#ffffd9', '#e9f6b1', '#d0ecb3', '#b5e1b6', '#9ad6b9', '#7cccbc', '#5fc0c0', '#3fb4c4', '#35a6c2', '#2697c1', '#2089bd', '#237bb6', '#236eaf', '#2260a9', '#2551a2', '#26439b', '#253594', '#1c2c80', '#12246b', '#081d58'];
    //let genreColors={'Action':'#0000ff', 'Adventure':' #006600', 'Fantasy':'#ffff00', 'Science Fiction':'#e600e6', 'Crime':'#7094db', 'Drama':'#ffb3d1', 'Thriller':'#00ffff', 'Animation':'#00ff00', 'Family':'#ccffcc', 'Western':'#cccccc', 'Comedy':'#66ffcc', 'Romance':'#ff0000', 'Horror':'#000000', 'Mystery':'#ffb3b3', 'History':'#e6b800', 'War':'#d24dff', 'Music':'#660066', 'Documentary':'#000066', 'Foreign':'#ccffff', 'TV Movie':'#ffffcc'};


    let rectangles = svg.selectAll("rect").data(genres);
    let rectEnter = rectangles.enter()
        .append("rect");

    rectangles = rectEnter.merge(rectangles);
    var cumulative = [];
    let i = 0;
    for (let item of genres) {
        if (i == 0) {
            cumulative[0] = item[1];
            i = 1;
        } else {
            cumulative[i] = cumulative[i - 1] + item[1];
            i++;
        }
    }
    cumulative.pop();
    rectangles.transition()
        .duration(1000)
        .attr("height", 30)
        .attr("x", function(d, i) {
            return i == 0 ? 20 : cumulative[i - 1] * 13 + 20;
        })
        .attr("y", 5)
        .attr("fill", function(d, i) {
            return genreColors[i]
        })
        .attr("stroke", "pink")
        .attr("stroke-width", "2")
        .attr("clicked", "yes")
        .attr("genre", function(d) {
            return d[0]
        })
        .attr("width", function(d) {
            return d[1] * 13
        })
        .attr("color", function(d, i) {
            return genreColors[i]
        });
    rectangles.on("click", function() {
        if (this.getAttribute("clicked") == "no") {
            //this.setAttribute("fill",this.getAttribute('color'));
            $(this).css("stroke-width", 2);
            this.setAttribute("clicked", "yes");
        } else {
            //$(this).css("fill-opacity",0.2);
            $(this).css("stroke-width", 0);
            this.setAttribute("clicked", "no");
        }

        $("#chosenGenres").text("");
        $("#chosenGenres").append("<strong>Selected Genres:<strong>");
        let ul = $('<ul />');
        $("[clicked='yes']").each(function() {
            let li = $('<li />').text(this.getAttribute("genre"));
            ul.append(li);
        })
        $("#chosenGenres").append(ul);
    })
    rectangles.on("mouseover", tip.show);
    rectangles.on("mouseout", tip.hide);
    /*rectangles.append("title")
              .text(function(d){
               return d[0];
              });*/

}

function getBudgetRevenueConsolidatedDataAndGenresForMenu(movieDetails) {
    let budYear = {},
        revYear = {},
        genres = {},
        totalGenres = 0,
        years = [];
    for (let row of movieDetails) {
        if (!(years.includes(row.year)) && row.year > 1000)
            years.push(row.year);
        for (let item of JSON.parse(row.genres)) {
            if (item.name in genres) {
                genres[item.name] += 1;
            } else {
                genres[item.name] = 1;
            }
            totalGenres++;
        }
        if (row.budget > 100 && row.year >= 1960) {
            if (row.year in budYear) {
                budYear[row.year] += row.budget / 1000000;
                revYear[row.year] += row.revenue / 1000000;
            } else {
                budYear[row.year] = row.budget / 1000000;
                revYear[row.year] = row.revenue / 1000000;
            }
        }
    }
    let budRev = [];
    for (row in budYear) {
        let obj = new Object();
        obj["year"] = +row;
        obj["budget"] = budYear[row];
        obj["revenue"] = revYear[row];
        budRev.push(obj);
    }
    for (let item in genres) {
        genres[item] = (genres[item] / totalGenres) * 100;
    }
    drawGenreBars(genres);
    populateYearDropdown(years);
    return budRev;
}

function getDictOfDict(movieDetails) {
    let primaryDict = {},
        genres = {},
        totalGenres = 0,
        years = [];
    for (let row of movieDetails) {
        if (!(years.includes(row.year)) && row.year > 1000)
            years.push(row.year);
        for (let item of JSON.parse(row.genres)) {
            if (item.name in genres) {
                genres[item.name] += 1;
            } else {
                genres[item.name] = 1;
            }
            totalGenres++;
        }
        if (row.budget > 100 && row.year >= 1960) {
            if (row["year"] in primaryDict) {
                for (let item of JSON.parse(row.genres)) {
                    if (item.name in primaryDict[row.year]["budget"]) {
                        primaryDict[row.year]["budget"][item.name] += row.budget / (1000000*JSON.parse(row.genres).length);
                        //primaryDict[row.year]["totalBudget"] += row.budget / 1000000;
                        primaryDict[row.year]["revenue"][item.name] += row.revenue / (1000000*JSON.parse(row.genres).length);
                        //primaryDict[row.year]["totalRevenue"] += row.revenue / 1000000;
                    } else {
                        primaryDict[row.year]["budget"][item.name] = row.budget / (1000000*JSON.parse(row.genres).length);
                        primaryDict[row.year]["revenue"][item.name] = row.revenue / (1000000*JSON.parse(row.genres).length);
                        //primaryDict[row.year]["totalBudget"] += row.budget / 1000000;
                        //primaryDict[row.year]["totalRevenue"] += row.revenue / 1000000;
                    }
                }
                primaryDict[row.year]["totalBudget"] += row.budget / 1000000;
                primaryDict[row.year]["totalRevenue"] += row.revenue / 1000000;
            } else {
                let yearNotPresent = 1;
                for (let item of JSON.parse(row.genres)) {
                    if (yearNotPresent) {

                        let temp1 = {},temp2={},temp3={};
                        temp1[item.name] = row.budget / (1000000*JSON.parse(row.genres).length);
                        temp3["budget"] = temp1;
                        temp2[item.name] = row.revenue / (1000000*JSON.parse(row.genres).length);
                        temp3["revenue"] = temp2;
                       // temp3["totalBudget"] = row.budget / (1000000*JSON.parse(row.genres).length);
                        //temp3["totalRevenue"] = row.revenue / (1000000*JSON.parse(row.genres).length);
                        primaryDict[row.year] = temp3;
                        yearNotPresent = 0;
                    } else {
                        primaryDict[row.year]["budget"][item.name] = row.budget / 1000000;
                        primaryDict[row.year]["revenue"][item.name] = row.revenue / 1000000;
                        //primaryDict[row.year]["totalBudget"] += row.budget / 1000000;
                        //primaryDict[row.year]["totalRevenue"] += row.revenue / 1000000;
                    }
                }
                primaryDict[row.year]["totalBudget"] = row.budget / 1000000;
                primaryDict[row.year]["totalRevenue"] = row.revenue / 1000000;
            }
        }
    }
    for (let item in genres) {
        genres[item] = (genres[item] / totalGenres) * 100;
    }
    drawGenreBars(genres);
    populateYearDropdown(years);
    return primaryDict;
}

$(document).ready(function() {
    d3.csv("public/data/budgetRevenueYearChartMovieDetails.csv", function(d) {
        d.budget = +d.budget;
        d.revenue = +d.revenue;
        d.year = +d.year;
        return d;
    }, function(error, movieDetails) {
        if (error)
            throw error;
        //let budRev = getBudgetRevenueConsolidatedDataAndGenresForMenu(movieDetails);
        let dictOfDict = getDictOfDict(movieDetails);
        $('#year-dropdown').multiselect({
            enableClickableOptGroups: true,
            enableCollapsibleOptGroups: true,
            includeSelectAllOption: true,
            enableFiltering: true,
            enableCaseInsensitiveFiltering: false,
            //allSelectedText: 'All Selected'
        });
        $('.multiselect-group').attr("state", "collapsed");
        $('li:not([class])').css("display", "none");
        $('.caret-container').on("click", function() {
            if ($(this.parentElement.parentElement).attr("state") == "uncollapsed") {
                $(this.firstElementChild).css("transform", "rotate(360deg)");
                $(this.parentElement.parentElement).attr("state", "collapsed");
            } else {
                $(this.firstElementChild).css("transform", "rotate(180deg)");
                $(this.parentElement.parentElement).attr("state", "uncollapsed");
            }
        });
        $('.multiselect-all').on('click', function(e) {
            if (e.target.type == "checkbox") {
                if (e.target.checked) {
                    $('.multiselect-group input').not(":checked").trigger('click');
                    e.stopPropagation();
                } else {
                    $('.multiselect-group input').trigger('click');
                    e.stopPropagation();
                }
            }

        });
        $('#menu-bar .multiselect ').addClass('btn-lg');
        //$('#menu-bar .multiselect-selected-text').text('Select Years')
        $("#year-dropdown").multiselect('selectAll', false);
        $("#year-dropdown").multiselect('updateButtonText');

        $("#chosenYears").text("");
        $("#chosenYears").append("<strong>Selected Years:<strong>");
        let ul = $('<ul />');
        $("#year-dropdown").find("optgroup").each(function() {
            let li = $('<li />').text($(this).attr('label'));
            ul.append(li);
        });
        $("#chosenYears").append(ul);

        setTimeout(function() {
            $("#chosenGenres").text("");
            $("#chosenGenres").append("<strong>Selected Genres:<strong>");
            ul = $('<ul />');
            $("[clicked='yes']").each(function() {
                let li = $('<li />').text(this.getAttribute("genre"));
                ul.append(li);
            })
            $("#chosenGenres").append(ul);
        }, 1000);


        $("#chosenYears").append(ul);
        $('#menu-bar').find('input').on("click", function(e) {
            if (e.originalEvent.isTrusted) {
                let status = e.target.checked;
                //Case 1: Clciked on Select All
                if (e.target.value == "multiselect-all") {
                    if (status) {
                        $("#chosenYears").text("");
                        $("#chosenYears").append("<strong>Selected Years:<strong>");
                        let ul = $('<ul />');
                        $("#year-dropdown").find("optgroup").each(function() {
                            let li = $('<li />').text($(this).attr('label'));
                            ul.append(li);
                            //console.log($(this).attr('label'));
                        });
                        $("#chosenYears").append(ul);
                    } else {

                        $("#chosenYears").text("");
                        $("#chosenYears").append("<strong>Selected Years:<strong><br/>-");
                        //console.log('-');
                    }
                }
                //Case 2: Clicked on OptGroup or option
                else {

                    let unselectedOptgroup = "";
                    if (e.target.value.startsWith('Decade') && !status)
                        unselectedOptgroup = e.target.value;
                    if (!(e.target.value.startsWith('Decade'))) {
                        let option = $("option[value='" + e.target.value + "']");
                        option[0].selected = status;
                        //All options of optgroup have been selected
                        if (option[0].parentElement.childElementCount == $(option[0].parentElement).find(":selected").length)
                            $("input[value^='" + option[0].parentElement.getAttribute("value") + "']")[0].checked = true;
                        if (option[0].parentElement.childElementCount != $(option[0].parentElement).find(":selected").length)
                            $("input[value^='" + option[0].parentElement.getAttribute("value") + "']")[0].checked = false;
                    }
                    $("#chosenYears").text("");
                    $("#chosenYears").append("<strong>Selected Years:<strong>");
                    let ul = $('<ul />');
                    $('input[value^="Decade"]:checked').each(function() {
                        let li = $('<li />').text(this.value);
                        ul.append(li);
                        //console.log(this.value);
                    })
                    $('input[value^="Decade"]').not(':checked').each(function() {
                        if (this.value != unselectedOptgroup) {
                            let optgroup = $("optgroup[value='" + this.value + "']");
                            var options = optgroup.children("option").filter(":selected").each(function() {
                                let li = $('<li />').text($(this).attr('value'));
                                ul.append(li);
                                //console.log($(this).attr('value'));
                            });
                        }
                    })
                    $("#chosenYears").append(ul);
                }
            }
        });

        let finalFormattedData = getFinalFormattedData(dictOfDict);
        drawbars(finalFormattedData);

       // let budRevYearChart = new budgetRevenueYearChart(finalFormattedData, movieDetails);
       // budRevYearChart.update();
    });
});

function getFinalFormattedData(dictOfDict) {
    let total = [];
    let data = [],
        data2 = [];
    let genres = ['TV Movie', 'Foreign', 'Western', 'Documentary', 'War', 'Music', 'History', 'Animation', 'Mystery', 'Fantasy', 'Family', 'Horror', 'Science Fiction', 'Crime', 'Adventure', 'Romance', 'Action', 'Thriller', 'Comedy', 'Drama'];
    for (let item in dictOfDict) {
        let temp = {},
            temp2 = {};
        temp["year"] = item, temp2["year"] = item;
        temp["total"]=dictOfDict[item].totalBudget;
        temp2["total"]=dictOfDict[item].totalRevenue;
        //temp["total"] = 0;
        //temp2["total"] = 0;
        for (let genre of genres) {
            temp[genre] = (genre in dictOfDict[item].budget) ? dictOfDict[item].budget[genre] : 0;
            temp2[genre] = (genre in dictOfDict[item].revenue) ? dictOfDict[item].revenue[genre] : 0;
            //temp["total"] += temp[genre];
            //temp2["total"] += temp2[genre];
        }
        data.push(temp);
        data2.push(temp2)
    }
    total.push(data);
    total.push(data2);
    return total;
}

function drawbars(data) {
    let budgetRevenueYearChart = d3.select("#budgetRevenueYearChart");
    var svg = budgetRevenueYearChart.append("svg").attr("width", 1450)
        .attr("height", 1200),
        margin = {
            top: 20,
            right: 20,
            bottom: 30,
            left: 40
        },
        width = +svg.attr("width") - margin.left - margin.right,
        height = +svg.attr("height") - margin.top - margin.bottom,
        g = svg.append("g").attr("transform", "translate(120,52)");

    var x = d3.scaleBand()
        .range([30, 1300]);

    var y = d3.scaleLinear().range([500, 0]); //d3.scaleLinear().rangeRound([height, 0]);

    var z = d3.scaleOrdinal()
        .range(['#ffffd9', '#e9f6b1', '#d0ecb3', '#b5e1b6', '#9ad6b9', '#7cccbc', '#5fc0c0', '#3fb4c4', '#35a6c2', '#2697c1', '#2089bd', '#237bb6', '#236eaf', '#2260a9', '#2551a2', '#26439b', '#253594', '#1c2c80', '#12246b', '#081d58']);

    var keys = ['TV Movie', 'Foreign', 'Western', 'Documentary', 'War', 'Music', 'History', 'Animation', 'Mystery', 'Fantasy', 'Family', 'Horror', 'Science Fiction', 'Crime', 'Adventure', 'Romance', 'Action', 'Thriller', 'Comedy', 'Drama'];

    //data.sort(function(a, b) { return b.total - a.total; });
    x.domain(data[1].map(function(d) {
        return d.year;
    }));
    y.domain([0, d3.max(data[1], function(d) {
        return d.total;
    })]);
    z.domain(keys);

    g.append("g")
        .selectAll("g")
        .data(d3.stack().keys(keys)(data[0]))
        .enter().append("g")
        .attr("fill", function(d) {
            return z(d.key);
        })
        .selectAll("rect")
        .data(function(d) {
            return d;
        })
        .enter().append("rect")
        .attr("x", function(d) {
            return x(d.data.year);
        })
        .attr("y", function(d) {
            return y(d[1]);
        })
        .attr("height", function(d) {
            return y(d[0]) - y(d[1]);
        })
        .attr("width", 10)
        .attr("budget_year", function(d) {
            return d.data.year
        });


    g.append("g")
        .selectAll("g")
        .data(d3.stack().keys(keys)(data[1]))
        .enter().append("g")
        .attr("fill", function(d) {
            return z(d.key);
        })
        .selectAll("rect")
        .data(function(d) {
            return d;
        })
        .enter().append("rect")
        .attr("x", function(d) {
            return x(d.data.year) + 11;
        })
        .attr("y", function(d) {
            return y(d[1]);
        })
        .attr("height", function(d) {
            return y(d[0]) - y(d[1]);
        })
        .attr("width", 10)
        .attr("revenue_year", function(d) {
            return d.data.year
        });

    /* g.append("g")
         .attr("class", "axis")
         .attr("transform", "translate(0," + 500 + ")")
         .call(d3.axisBottom(x));

     g.append("g")
         .attr("class", "axis")
         .call(d3.axisLeft(y).ticks(null, "s"))
       .append("text")
         .attr("x", 2)
         .attr("y", y(y.ticks().pop()) + 0.5)
         .attr("dy", "0.32em")
         .attr("fill", "#000")
         .attr("font-weight", "bold")
         .attr("text-anchor", "start")
         .text("Population");*/
    g.append("g")
        .attr("class", "axis axis--x")
        .attr("transform", "translate(0," + 500 + ")")
        .call(d3.axisBottom(x))
        .append("text")
        .attr("x", "685")
        .attr("dy", "3.5em")
        .attr("fill", "black")
        .attr("id", "xAxisLabel")
        .attr("style", "font-size:large")
        .text("Years");

    d3.select(".axis--x").selectAll("text:not(#xAxisLabel)").attr("transform", "rotate(-70)");
    d3.select(".axis--x").selectAll("text:not(#xAxisLabel)").attr("dy", "-0.50em");
    d3.select(".axis--x").selectAll("text:not(#xAxisLabel)").attr("x", "-20");

    y2 = d3.scaleLinear().domain([0, d3.max(data[1], function(d) {
        return d.total;
    })]).range([500, 0]);
    g.append("g")
        .attr("class", "axis axis--y")
        .attr("transform", "translate(30," + 0 + ")")
        .call(d3.axisLeft(y2).ticks(10))
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", "-3.8em")
        .attr("dx", "-7em")
        .attr("text-anchor", "end")
        .attr("fill", "black")
        .attr("style", "font-size:large")
        .text("Budget & Revenue in Million");

    var legend = g.append("g")
        .attr("font-family", "sans-serif")
        .attr("font-size", 10)
        .attr("text-anchor", "start")
        .selectAll("g")
        .data(keys.slice().reverse())
        .enter().append("g")
        .attr("transform", function(d, i) {
            return "translate(0," + i * 20 + ")";
        });

    legend.append("rect")
        .attr("x", 40)
        .attr("width", 19)
        .attr("height", 19)
        .attr("fill", z);

    legend.append("text")
        .attr("x", 70)
        .attr("y", 9.5)
        .attr("dy", "0.32em")
        .text(function(d) {
            return d;
        });


}